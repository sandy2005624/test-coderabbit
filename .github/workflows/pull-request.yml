name: PR Workflow

on:
  pull_request:
    branches:
      - '**'

jobs:
  CodeRabbit-Approval:
    name: Validate CodeRabbit.ai Approval
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CodeRabbit.ai Approval
        run: |
          echo "Step 1: Waiting for CodeRabbit.ai approval..."

          MAX_WAIT_TIME=600  # Maximum wait time in seconds (10 minutes)
          CHECK_INTERVAL=30  # Interval between checks in seconds
          TIME_ELAPSED=0
          APPROVED=0

          while [ $TIME_ELAPSED -lt $MAX_WAIT_TIME ]; do
            echo "Fetching PR reviews from GitHub API..."
            reviews=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews")
            
            if [ $? -ne 0 ]; then
              echo "Error: Failed to fetch PR reviews."
              exit 1
            fi

            echo "Checking if the response is valid JSON..."
            if ! echo "$reviews" | jq . >/dev/null 2>&1; then
              echo "Error: Invalid JSON response from GitHub API."
              echo "Response received: $reviews"
              exit 1
            fi

            echo "Parsing the latest review by each user..."
            latest_reviews=$(echo "$reviews" | jq -c '[.[]] | group_by(.user.login) | map(max_by(.submitted_at))')

            echo "Printing all latest review user logins and states:"
            echo "$latest_reviews" | jq -r '.[] | "User: \(.user.login), State: \(.state)"'

            echo "Checking approval status of 'coderabbitai'..."
            approval_state=$(echo "$latest_reviews" | jq -r '[.[] | select(.user.login == "coderabbitai[bot]" and .state == "APPROVED")] | length')
            
            echo "Approval count for CodeRabbit.ai: $approval_state"
            
            if [[ "$approval_state" =~ ^[0-9]+$ ]] && [[ $approval_state -gt 0 ]]; then
              echo "Success: PR approved by CodeRabbit.ai."
              APPROVED=1
              break
            fi

            echo "No approval yet. Waiting for $CHECK_INTERVAL seconds before rechecking..."
            sleep $CHECK_INTERVAL
            TIME_ELAPSED=$((TIME_ELAPSED + CHECK_INTERVAL))
          done

          if [ $APPROVED -eq 0 ]; then
            echo "Error: Timed out waiting for CodeRabbit.ai approval."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
